[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wrangling Formula One Motorsport Data With Python",
    "section": "",
    "text": "Several years ago, I put together a collection of recipes for analysing and visualising Formula One results and timing data using the R programming language, and published them via the Leanpub self-publishing platform."
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "This publication was independently produced and is not associated in any way with the Formula 1 companies. F1, FORMULA ONE, FORMULA 1, FIA FORMULA ONE WORLD CHAMPIONSHIP, GRAND PRIX and related marks are trade marks of Formula One Licensing B.V."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "EXAMPLE REF: See Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "fastf1-demo.html",
    "href": "fastf1-demo.html",
    "title": "2  Getting Started With FastF1",
    "section": "",
    "text": "The theOehrly/Fast-F1 Python package [docs] provides a relatively straightforward way of downloading and accessing telemetry data from the Formula One website and the ergast historical motor racing results database.\nIn this chapter, we’ll have a quick overview of the package to get a feel for the sorts of things we can do with it, before diving in to more detail in other chapters.\nLet’s start off by importing the package:\nThe package API may change rapidly, and may include breaking changes.\nThe code used in this chapter relates to version 2.2.9.\nTo minimise the number of calls made to the website, the package can be configured to cache data whenever possible.\nData can be retrieved for specific sessions of specific races.\nAs the data is loaded, a diagnostic trace is displayed showing what data has been retrieved, and from where (for example, downloaded from the original API or retrieved from the cache).\nA good selection of metadata is available to describe the associated event:"
  },
  {
    "objectID": "fastf1-demo.html#driver-details",
    "href": "fastf1-demo.html#driver-details",
    "title": "2  Getting Started With FastF1",
    "section": "2.1 Driver Details",
    "text": "2.1 Driver Details\nA wide range of data is available, and can be can be explored in several ways.\nFor example, we can get the data for a particular driver, and identify their fastest lap, along with various summary statistics for it:\nHere’s an example of the driver details:\n\nmonza_quali.get_driver('LEC')\n\nDriverNumber                         16\nBroadcastName                 C LECLERC\nAbbreviation                        LEC\nTeamName                        Ferrari\nTeamColor                        dc0000\nFirstName                       Charles\nLastName                        Leclerc\nFullName                Charles Leclerc\nPosition                            1.0\nGridPosition                        0.0\nQ1               0 days 00:01:20.126000\nQ2               0 days 00:01:19.553000\nQ3               0 days 00:01:19.307000\nTime                                NaT\nStatus                                 \nPoints                              0.0\nName: Charles, dtype: object\n\n\nWe can retrieve summary data about each lap:\n\nmonza_quali.laps.head()\n\n\n\n\n\n  \n    \n      \n      Time\n      DriverNumber\n      LapTime\n      LapNumber\n      Stint\n      PitOutTime\n      PitInTime\n      Sector1Time\n      Sector2Time\n      Sector3Time\n      ...\n      IsPersonalBest\n      Compound\n      TyreLife\n      FreshTyre\n      LapStartTime\n      Team\n      Driver\n      TrackStatus\n      IsAccurate\n      LapStartDate\n    \n  \n  \n    \n      0\n      0 days 00:21:01.358000\n      16\n      NaT\n      1\n      1\n      0 days 00:19:26.847000\n      NaT\n      NaT\n      0 days 00:00:30.837000\n      0 days 00:00:33.016000\n      ...\n      False\n      MEDIUM\n      1.0\n      True\n      0 days 00:19:26.847000\n      Ferrari\n      LEC\n      1\n      False\n      2019-09-07 13:04:27.940\n    \n    \n      1\n      0 days 00:22:21.775000\n      16\n      0 days 00:01:20.417000\n      2\n      1\n      NaT\n      NaT\n      0 days 00:00:26.982000\n      0 days 00:00:26.734000\n      0 days 00:00:26.701000\n      ...\n      False\n      MEDIUM\n      2.0\n      True\n      0 days 00:21:01.358000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:06:02.451\n    \n    \n      2\n      0 days 00:24:03.991000\n      16\n      0 days 00:01:42.216000\n      3\n      1\n      NaT\n      NaT\n      0 days 00:00:33.988000\n      0 days 00:00:35.632000\n      0 days 00:00:32.596000\n      ...\n      False\n      MEDIUM\n      3.0\n      True\n      0 days 00:22:21.775000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:07:22.868\n    \n    \n      3\n      0 days 00:25:24.117000\n      16\n      0 days 00:01:20.126000\n      4\n      1\n      NaT\n      NaT\n      0 days 00:00:26.749000\n      0 days 00:00:26.777000\n      0 days 00:00:26.600000\n      ...\n      False\n      MEDIUM\n      4.0\n      True\n      0 days 00:24:03.991000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:09:05.084\n    \n    \n      4\n      0 days 00:27:09.461000\n      16\n      0 days 00:01:45.344000\n      5\n      1\n      NaT\n      NaT\n      0 days 00:00:33.884000\n      0 days 00:00:37.703000\n      0 days 00:00:33.757000\n      ...\n      False\n      MEDIUM\n      5.0\n      True\n      0 days 00:25:24.117000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:10:25.210\n    \n  \n\n5 rows × 27 columns"
  },
  {
    "objectID": "fastf1-demo.html#laps-data",
    "href": "fastf1-demo.html#laps-data",
    "title": "2  Getting Started With FastF1",
    "section": "2.2 Laps Data",
    "text": "2.2 Laps Data\nA wide range of data is provided as part of the Laps table:\n\nmonza_quali.laps.columns\n\nIndex(['Time', 'DriverNumber', 'LapTime', 'LapNumber', 'Stint', 'PitOutTime',\n       'PitInTime', 'Sector1Time', 'Sector2Time', 'Sector3Time',\n       'Sector1SessionTime', 'Sector2SessionTime', 'Sector3SessionTime',\n       'SpeedI1', 'SpeedI2', 'SpeedFL', 'SpeedST', 'IsPersonalBest',\n       'Compound', 'TyreLife', 'FreshTyre', 'LapStartTime', 'Team', 'Driver',\n       'TrackStatus', 'IsAccurate', 'LapStartDate'],\n      dtype='object')\n\n\nWe can check the laps for a particular car:\n\nlec_laps = monza_quali.laps.pick_driver(16)\nlec_laps[:5]\n\n\n\n\n\n  \n    \n      \n      Time\n      DriverNumber\n      LapTime\n      LapNumber\n      Stint\n      PitOutTime\n      PitInTime\n      Sector1Time\n      Sector2Time\n      Sector3Time\n      ...\n      IsPersonalBest\n      Compound\n      TyreLife\n      FreshTyre\n      LapStartTime\n      Team\n      Driver\n      TrackStatus\n      IsAccurate\n      LapStartDate\n    \n  \n  \n    \n      0\n      0 days 00:21:01.358000\n      16\n      NaT\n      1\n      1\n      0 days 00:19:26.847000\n      NaT\n      NaT\n      0 days 00:00:30.837000\n      0 days 00:00:33.016000\n      ...\n      False\n      MEDIUM\n      1.0\n      True\n      0 days 00:19:26.847000\n      Ferrari\n      LEC\n      1\n      False\n      2019-09-07 13:04:27.940\n    \n    \n      1\n      0 days 00:22:21.775000\n      16\n      0 days 00:01:20.417000\n      2\n      1\n      NaT\n      NaT\n      0 days 00:00:26.982000\n      0 days 00:00:26.734000\n      0 days 00:00:26.701000\n      ...\n      False\n      MEDIUM\n      2.0\n      True\n      0 days 00:21:01.358000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:06:02.451\n    \n    \n      2\n      0 days 00:24:03.991000\n      16\n      0 days 00:01:42.216000\n      3\n      1\n      NaT\n      NaT\n      0 days 00:00:33.988000\n      0 days 00:00:35.632000\n      0 days 00:00:32.596000\n      ...\n      False\n      MEDIUM\n      3.0\n      True\n      0 days 00:22:21.775000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:07:22.868\n    \n    \n      3\n      0 days 00:25:24.117000\n      16\n      0 days 00:01:20.126000\n      4\n      1\n      NaT\n      NaT\n      0 days 00:00:26.749000\n      0 days 00:00:26.777000\n      0 days 00:00:26.600000\n      ...\n      False\n      MEDIUM\n      4.0\n      True\n      0 days 00:24:03.991000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:09:05.084\n    \n    \n      4\n      0 days 00:27:09.461000\n      16\n      0 days 00:01:45.344000\n      5\n      1\n      NaT\n      NaT\n      0 days 00:00:33.884000\n      0 days 00:00:37.703000\n      0 days 00:00:33.757000\n      ...\n      False\n      MEDIUM\n      5.0\n      True\n      0 days 00:25:24.117000\n      Ferrari\n      LEC\n      1\n      True\n      2019-09-07 13:10:25.210\n    \n  \n\n5 rows × 27 columns"
  },
  {
    "objectID": "fastf1-demo.html#car-telemetry-data",
    "href": "fastf1-demo.html#car-telemetry-data",
    "title": "2  Getting Started With FastF1",
    "section": "2.3 Car Telemetry Data",
    "text": "2.3 Car Telemetry Data\nPerhaps more interestingly, we can look up regular samples of raw car data for a particular driver:\n\nmonza_quali.car_data['16'][:5]\n\n\n\n\n\n  \n    \n      \n      Date\n      RPM\n      Speed\n      nGear\n      Throttle\n      Brake\n      DRS\n      Source\n      Time\n      SessionTime\n    \n  \n  \n    \n      0\n      2019-09-07 12:45:02.230\n      0\n      0\n      0\n      0\n      False\n      0\n      car\n      0 days 00:00:01.137000\n      0 days 00:00:01.137000\n    \n    \n      1\n      2019-09-07 12:45:02.470\n      0\n      0\n      0\n      0\n      False\n      0\n      car\n      0 days 00:00:01.377000\n      0 days 00:00:01.377000\n    \n    \n      2\n      2019-09-07 12:45:02.710\n      0\n      0\n      0\n      0\n      False\n      0\n      car\n      0 days 00:00:01.617000\n      0 days 00:00:01.617000\n    \n    \n      3\n      2019-09-07 12:45:02.990\n      0\n      0\n      0\n      0\n      False\n      0\n      car\n      0 days 00:00:01.897000\n      0 days 00:00:01.897000\n    \n    \n      4\n      2019-09-07 12:45:03.230\n      0\n      0\n      0\n      0\n      False\n      0\n      car\n      0 days 00:00:02.137000\n      0 days 00:00:02.137000\n    \n  \n\n\n\n\nAn even more helpful telemetry data report includes a derived accumulated distance travelled round the track on each lap, as well as on-track contextual information, such as the distance to, and identity of, the driver ahead on-track.\nWe can retrieve the telemetry data associated with a particular lap by calling the get_telemetry() method on a single lap object:\n\n# We need to index to a particular lap record\nlec_laps.iloc[1].get_telemetry()\n\n\n\n\n\n  \n    \n      \n      Date\n      SessionTime\n      DriverAhead\n      DistanceToDriverAhead\n      Time\n      RPM\n      Speed\n      nGear\n      Throttle\n      Brake\n      DRS\n      Source\n      Distance\n      RelativeDistance\n      Status\n      X\n      Y\n      Z\n    \n  \n  \n    \n      2\n      2019-09-07 13:06:02.451\n      0 days 00:21:01.358000\n      \n      400.271389\n      0 days 00:00:00\n      11464\n      319\n      8\n      100\n      False\n      8\n      interpolation\n      0.031139\n      0.000005\n      OnTrack\n      -1413\n      -840\n      1871\n    \n    \n      3\n      2019-09-07 13:06:02.521\n      0 days 00:21:01.428000\n      \n      400.271389\n      0 days 00:00:00.070000\n      11479\n      319\n      8\n      100\n      False\n      8\n      pos\n      6.278267\n      0.001083\n      OnTrack\n      -1396\n      -769\n      1872\n    \n    \n      4\n      2019-09-07 13:06:02.524\n      0 days 00:21:01.431000\n      \n      400.271389\n      0 days 00:00:00.073000\n      11509\n      320\n      8\n      100\n      False\n      8\n      car\n      6.546389\n      0.001129\n      OnTrack\n      -1395\n      -766\n      1872\n    \n    \n      5\n      2019-09-07 13:06:02.764\n      0 days 00:21:01.671000\n      88\n      400.271389\n      0 days 00:00:00.313000\n      11584\n      323\n      8\n      100\n      False\n      8\n      car\n      28.079722\n      0.004843\n      OnTrack\n      -1375\n      -566\n      1872\n    \n    \n      6\n      2019-09-07 13:06:02.821\n      0 days 00:21:01.728000\n      88\n      400.671389\n      0 days 00:00:00.370000\n      11578\n      323\n      8\n      100\n      False\n      8\n      pos\n      33.206760\n      0.005728\n      OnTrack\n      -1371\n      -520\n      1873\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      597\n      2019-09-07 13:07:22.522\n      0 days 00:22:21.429000\n      88\n      151.229167\n      0 days 00:01:20.071000\n      11512\n      319\n      8\n      100\n      False\n      8\n      pos\n      5754.345540\n      0.992564\n      OnTrack\n      -1438\n      -1212\n      1870\n    \n    \n      598\n      2019-09-07 13:07:22.525\n      0 days 00:22:21.432000\n      88\n      150.462500\n      0 days 00:01:20.074000\n      11539\n      320\n      8\n      100\n      False\n      8\n      car\n      5754.613056\n      0.992610\n      OnTrack\n      -1437\n      -1208\n      1870\n    \n    \n      599\n      2019-09-07 13:07:22.765\n      0 days 00:22:21.672000\n      88\n      148.795833\n      0 days 00:01:20.314000\n      11575\n      322\n      8\n      100\n      False\n      8\n      car\n      5776.079722\n      0.996313\n      OnTrack\n      -1413\n      -945\n      1870\n    \n    \n      600\n      2019-09-07 13:07:22.822\n      0 days 00:22:21.729000\n      88\n      148.795833\n      0 days 00:01:20.371000\n      11607\n      322\n      8\n      100\n      False\n      8\n      pos\n      5781.180410\n      0.997192\n      OnTrack\n      -1408\n      -889\n      1871\n    \n    \n      601\n      2019-09-07 13:07:22.868\n      0 days 00:22:21.775000\n      88\n      148.795833\n      0 days 00:01:20.417000\n      11623\n      322\n      8\n      100\n      False\n      8\n      interpolation\n      5785.295662\n      0.997902\n      OnTrack\n      -1403\n      -845\n      1871\n    \n  \n\n600 rows × 18 columns\n\n\n\nWe can more explicitly return the record for a specific lap by filtering on the LapNumner:\n\ndef onLap(laps, lap):\n    \"\"\"Get record for a particular lap.\"\"\"\n    return laps[laps[\"LapNumber\"]==lap].iloc[0]\n\n\nonLap(lec_laps, 2) \n\nTime                      0 days 00:22:21.775000\nDriverNumber                                  16\nLapTime                   0 days 00:01:20.417000\nLapNumber                                      2\nStint                                          1\nPitOutTime                                   NaT\nPitInTime                                    NaT\nSector1Time               0 days 00:00:26.982000\nSector2Time               0 days 00:00:26.734000\nSector3Time               0 days 00:00:26.701000\nSector1SessionTime        0 days 00:21:28.340000\nSector2SessionTime        0 days 00:21:55.074000\nSector3SessionTime        0 days 00:22:21.775000\nSpeedI1                                    323.0\nSpeedI2                                    342.0\nSpeedFL                                    318.0\nSpeedST                                    342.0\nIsPersonalBest                             False\nCompound                                  MEDIUM\nTyreLife                                     2.0\nFreshTyre                                   True\nLapStartTime              0 days 00:21:01.358000\nTeam                                     Ferrari\nDriver                                       LEC\nTrackStatus                                    1\nIsAccurate                                  True\nLapStartDate          2019-09-07 13:06:02.451000\nName: 1, dtype: object\n\n\nWe can get then telemetry for the lap by calling the .get_telemetry() method on the returned lap object:\n\nonLap(lec_laps, 2).get_telemetry()\n\n\n\n\n\n  \n    \n      \n      Date\n      SessionTime\n      DriverAhead\n      DistanceToDriverAhead\n      Time\n      RPM\n      Speed\n      nGear\n      Throttle\n      Brake\n      DRS\n      Source\n      Distance\n      RelativeDistance\n      Status\n      X\n      Y\n      Z\n    \n  \n  \n    \n      2\n      2019-09-07 13:06:02.451\n      0 days 00:21:01.358000\n      \n      400.271389\n      0 days 00:00:00\n      11464\n      319\n      8\n      100\n      False\n      8\n      interpolation\n      0.031139\n      0.000005\n      OnTrack\n      -1413\n      -840\n      1871\n    \n    \n      3\n      2019-09-07 13:06:02.521\n      0 days 00:21:01.428000\n      \n      400.271389\n      0 days 00:00:00.070000\n      11479\n      319\n      8\n      100\n      False\n      8\n      pos\n      6.278267\n      0.001083\n      OnTrack\n      -1396\n      -769\n      1872\n    \n    \n      4\n      2019-09-07 13:06:02.524\n      0 days 00:21:01.431000\n      \n      400.271389\n      0 days 00:00:00.073000\n      11509\n      320\n      8\n      100\n      False\n      8\n      car\n      6.546389\n      0.001129\n      OnTrack\n      -1395\n      -766\n      1872\n    \n    \n      5\n      2019-09-07 13:06:02.764\n      0 days 00:21:01.671000\n      88\n      400.271389\n      0 days 00:00:00.313000\n      11584\n      323\n      8\n      100\n      False\n      8\n      car\n      28.079722\n      0.004843\n      OnTrack\n      -1375\n      -566\n      1872\n    \n    \n      6\n      2019-09-07 13:06:02.821\n      0 days 00:21:01.728000\n      88\n      400.671389\n      0 days 00:00:00.370000\n      11578\n      323\n      8\n      100\n      False\n      8\n      pos\n      33.206760\n      0.005728\n      OnTrack\n      -1371\n      -520\n      1873\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      597\n      2019-09-07 13:07:22.522\n      0 days 00:22:21.429000\n      88\n      151.229167\n      0 days 00:01:20.071000\n      11512\n      319\n      8\n      100\n      False\n      8\n      pos\n      5754.345540\n      0.992564\n      OnTrack\n      -1438\n      -1212\n      1870\n    \n    \n      598\n      2019-09-07 13:07:22.525\n      0 days 00:22:21.432000\n      88\n      150.462500\n      0 days 00:01:20.074000\n      11539\n      320\n      8\n      100\n      False\n      8\n      car\n      5754.613056\n      0.992610\n      OnTrack\n      -1437\n      -1208\n      1870\n    \n    \n      599\n      2019-09-07 13:07:22.765\n      0 days 00:22:21.672000\n      88\n      148.795833\n      0 days 00:01:20.314000\n      11575\n      322\n      8\n      100\n      False\n      8\n      car\n      5776.079722\n      0.996313\n      OnTrack\n      -1413\n      -945\n      1870\n    \n    \n      600\n      2019-09-07 13:07:22.822\n      0 days 00:22:21.729000\n      88\n      148.795833\n      0 days 00:01:20.371000\n      11607\n      322\n      8\n      100\n      False\n      8\n      pos\n      5781.180410\n      0.997192\n      OnTrack\n      -1408\n      -889\n      1871\n    \n    \n      601\n      2019-09-07 13:07:22.868\n      0 days 00:22:21.775000\n      88\n      148.795833\n      0 days 00:01:20.417000\n      11623\n      322\n      8\n      100\n      False\n      8\n      interpolation\n      5785.295662\n      0.997902\n      OnTrack\n      -1403\n      -845\n      1871\n    \n  \n\n600 rows × 18 columns\n\n\n\nFind the fastest lap from a set of laps:\n\nlec_fast_lap =  lec_laps.pick_fastest()\nlec_fast_lap\n\nTime                      0 days 01:11:14.868000\nDriverNumber                                  16\nLapTime                   0 days 00:01:19.307000\nLapNumber                                     14\nStint                                          5\nPitOutTime                                   NaT\nPitInTime                                    NaT\nSector1Time               0 days 00:00:26.469000\nSector2Time               0 days 00:00:26.412000\nSector3Time               0 days 00:00:26.426000\nSector1SessionTime        0 days 01:10:22.030000\nSector2SessionTime        0 days 01:10:48.442000\nSector3SessionTime        0 days 01:11:14.868000\nSpeedI1                                    329.0\nSpeedI2                                    347.0\nSpeedFL                                    321.0\nSpeedST                                    349.0\nIsPersonalBest                              True\nCompound                                    SOFT\nTyreLife                                     3.0\nFreshTyre                                   True\nLapStartTime              0 days 01:09:55.561000\nTeam                                     Ferrari\nDriver                                       LEC\nTrackStatus                                    2\nIsAccurate                                  True\nLapStartDate          2019-09-07 13:54:56.654000\nName: 13, dtype: object\n\n\nWe can also iterate over the laps, for example as monza_quali.laps.pick_driver(16).iterlaps(); each iteration returns a 2-tuple of the car number and the data for a particular lap.\nWe can get the telemetry for that driver on each lap by calling the .get_telemetry() method on the second (lap) element in the 2-tuple."
  },
  {
    "objectID": "fastf1-demo.html#simple-plots",
    "href": "fastf1-demo.html#simple-plots",
    "title": "2  Getting Started With FastF1",
    "section": "2.4 Simple Plots",
    "text": "2.4 Simple Plots\nThe fastf1 package also provides a range of tools to support the plotting of data:\n\nfrom matplotlib import pyplot as plt\nfrom fastf1 import plotting\n\n# Configures timebase for axis ticks\nplotting.setup_mpl()\n\nFor example, a range of labels and colour schemes are defined for enriching displays:\n\nff1.plotting.TEAM_TRANSLATE\n\n{'MER': 'mercedes',\n 'FER': 'ferrari',\n 'RBR': 'red bull',\n 'MCL': 'mclaren',\n 'APN': 'alpine',\n 'AMR': 'aston martin',\n 'ARR': 'alfa romeo',\n 'APT': 'alphatauri',\n 'HAA': 'haas',\n 'WIL': 'williams'}\n\n\n\nff1.plotting.TEAM_COLORS\n\n{'mercedes': '#00d2be',\n 'ferrari': '#dc0000',\n 'red bull': '#0600ef',\n 'mclaren': '#ff8700',\n 'alpine': '#0090ff',\n 'aston martin': '#006f62',\n 'alfa romeo': '#900000',\n 'alphatauri': '#2b4562',\n 'haas': '#ffffff',\n 'williams': '#005aff'}\n\n\n\nff1.plotting.DRIVER_COLORS\n\n{'valtteri bottas': '#900000',\n 'zhou guanyu': '#500000',\n 'pierre gasly': '#2b4562',\n 'yuki tsunoda': '#356cac',\n 'fernando alonso': '#0090ff',\n 'esteban ocon': '#70c2ff',\n 'sebastian vettel': '#006f62',\n 'lance stroll': '#25a617',\n 'nico hulkenberg': '#2f9b90',\n 'charles leclerc': '#dc0000',\n 'carlos sainz': '#ff8181',\n 'kevin magnussen': '#ffffff',\n 'mick schumacher': '#cacaca',\n 'daniel ricciardo': '#ff8700',\n 'lando norris': '#eeb370',\n 'lewis hamilton': '#00d2be',\n 'george russell': '#24ffff',\n 'max verstappen': '#0600ef',\n 'sergio perez': '#716de2',\n 'alexander albon': '#005aff',\n 'nicholas latifi': '#012564'}\n\n\n\nff1.plotting.COLOR_PALETTE\n\n['#FF79C6', '#50FA7B', '#8BE9FD', '#BD93F9', '#FFB86C', '#FF5555', '#F1FA8C']\n\n\nWe can trivially plot the speed against the distance round the track, for example, using telemetry data:\n\n#Get the telemetry for a lap \nlec_telem = lec_fast_lap.get_telemetry()\n\nt = lec_telem['Distance']\nvCar = lec_telem['Speed']\n\n# Create a chart object\nfig, ax = plt.subplots()\n\n# Plot the speed against distance round track\nax.plot(t, vCar, label='Personal fastest lap')\n\n# Add axis labels\nax.set_xlabel('Distance round track')\nax.set_ylabel('Speed [Km/h]')\n\n# Add title\nax.set_title('Example speed track round track')\n\n# Show legend\nax.legend();\n\n\n\n\nWith access to lap data associated with a session, we can generate a wide range of charts that summarise different aspects of the session.\nFor example, let’s get the data from a particular race:\n\nrace = ff1.get_session(2020, 'Turkish Grand Prix', 'R')\nrace.load()\n\ncore           INFO     Loading data for Turkish Grand Prix - Race [v2.2.9]\napi            INFO     Using cached data for driver_info\napi            INFO     Using cached data for timing_data\napi            INFO     Using cached data for timing_app_data\ncore           INFO     Processing timing data...\napi            INFO     Using cached data for session_status_data\napi            INFO     Using cached data for track_status_data\napi            INFO     Using cached data for car_data\napi            INFO     Using cached data for position_data\napi            INFO     Using cached data for weather_data\napi            INFO     Using cached data for race_control_messages\ncore           INFO     Finished loading data for 20 drivers: ['44', '11', '5', '16', '55', '33', '23', '4', '18', '3', '31', '26', '10', '77', '7', '63', '20', '8', '6', '99']\n\n\nThe following function can be used to plot a chart showing laptimes over the course of a session for one or more drivers.\n\nfrom fastf1.plotting import DRIVER_COLORS, DRIVER_TRANSLATE\n\ndef plot_laptimes(race, drivers):\n    \"\"\"Plot laptimes over the course of a race.\"\"\"\n    drivers = [drivers] if isinstance(drivers, str) else drivers\n    fig, ax = plt.subplots()\n    # Generate an appropriately coloured trace for each driver\n    for _driver in drivers:\n        driver = race.laps.pick_driver(_driver)\n        ax.plot(driver['LapNumber'], driver['LapTime'],\n                color=DRIVER_COLORS[DRIVER_TRANSLATE[_driver]])\n    # Annotate the chart with a title and axis labels\n    ax.set_title(\" vs \".join(drivers))\n    ax.set_xlabel(\"Lap Number\")\n    ax.set_ylabel(\"Lap Time\")\n    return fig, ax\n\nWe can now compare laptimes over the course of the race in a graphical way:\n\nplot_laptimes(race, [\"HAM\", \"LEC\"]);"
  },
  {
    "objectID": "fastf1-demo.html#telemetry-visualisations-via-track-maps",
    "href": "fastf1-demo.html#telemetry-visualisations-via-track-maps",
    "title": "2  Getting Started With FastF1",
    "section": "2.5 Telemetry Visualisations via Track Maps",
    "text": "2.5 Telemetry Visualisations via Track Maps\nX and Y positions seems to be co-ordinate locations for an on-screen display ( https://github.com/theOehrly/Fast-F1/issues/64 ). This means we probably aren’t seeing location data at a resolution good enough to display racing lines on a map, which accurate GPS data would give us.\nWe can create a simple function to display a map of the track as generated from the X and Y co-ordinates of the sampled telemetry data.\n\ndef plot_track(lap, linewidth=16, color=\"white\"):\n    \"\"\"Generate a track map from telemetry data co-ordinates.\"\"\"\n    fig, ax = plt.subplots(sharex=True, sharey=True,\n                           figsize=(12, 6.75))\n    ax.axis('off')\n\n    ax.plot(lap.telemetry['X'], lap.telemetry['Y'],\n            color=color, linestyle='-', linewidth=linewidth, zorder=0)\n    return fig, ax\n\n\nfig, ax = plot_track(lec_fast_lap)\n\n# Add a title to the figure object\nfig.suptitle(f'Track map', size=24, y=0.97);\n\n\n\n\nThe matplotlib documentation provides an example for generating a multicoloured line from a list of co-ordinates. Consecutive pairs of co-ordinates define consecutive line segments. The line segments are then coloured according to a particular colour mapped value.\nThe following function will generate a coloured trace overlaying the track map that visualises one of the telemetry measures.\n\nfrom matplotlib.collections import LineCollection\nimport matplotlib as mpl\nimport numpy as np\n\ndef get_multicoloured_line(lap, color='Speed', title='',\n                           colormap=mpl.cm.plasma, linewidth=5, ax=None):\n    \"\"\"Generate a matplotlib plottable mutlicoloured line.\"\"\"\n    if ax is None:\n        fig, ax = plot_track(lap, linewidth=linewidth+2)\n    else:\n        fig = ax.get_figure()\n\n    ##############################################################################\n    # Create a set of line segments so that we can color them\n    # individually. This creates the points as a N x 1 x 2 array so that we can\n    # stack points together easily to get the segments. The segments array for\n    # line collection needs to be (numlines) x (points per line) x 2 (for x and y)\n    X = lap.telemetry['X'] \n    Y = lap.telemetry['Y']\n    \n    _color = lap.telemetry[color]\n    \n    points = np.array([X, Y]).T.reshape(-1, 1, 2)\n    segments = np.concatenate([points[:-1], points[1:]], axis=1)\n    \n    if color is not None:\n        # Create a continuous norm to map from data points to colors\n        norm = plt.Normalize(_color.min(), _color.max())\n        lc = LineCollection(segments, cmap=colormap, norm=norm, linestyle='-', linewidth=5)\n        # Set the values used for colormapping\n        lc.set_array(_color)\n    else:\n        lc = LineCollection(segments, linestyle='-', linewidth=linewidth)\n    \n    line = ax.add_collection(lc)\n    # Add color bar legend\n    fig.colorbar(line, ax=ax, orientation=\"horizontal\")\n    # Add title\n    if title:\n        fig.suptitle(f\"{title} ({color})\", size=24, y=0.97)\n    return lc\n\nWe can now plot telemtry data traces against the position on track at which they we recorded:\n\nget_multicoloured_line(lec_fast_lap, title=\"Example track map\");\n\n\n\n\n\nget_multicoloured_line(lec_fast_lap, \"Throttle\", title=\"Example track map\");"
  },
  {
    "objectID": "fastf1-demo.html#retrieving-data-from-the-ergast-api",
    "href": "fastf1-demo.html#retrieving-data-from-the-ergast-api",
    "title": "2  Getting Started With FastF1",
    "section": "2.6 Retrieving Data from the ergast API",
    "text": "2.6 Retrieving Data from the ergast API\nBasic support for retrieving data from the ergast historical motor racing results data API is provided.\nFor example, we can return summary results data for a particular race (\"Race\") or qualifying session (\"Qualifying“) in a particular season:\n\nfrom fastf1 import ergast\nimport pandas as pd\n\nerd_race = ergast.fetch_results(2022, 2, \"Race\")\n\nerd_race[:1]\n\n[{'number': '1',\n  'position': '1',\n  'positionText': '1',\n  'points': '25',\n  'Driver': {'driverId': 'max_verstappen',\n   'permanentNumber': '33',\n   'code': 'VER',\n   'url': 'http://en.wikipedia.org/wiki/Max_Verstappen',\n   'givenName': 'Max',\n   'familyName': 'Verstappen',\n   'dateOfBirth': '1997-09-30',\n   'nationality': 'Dutch'},\n  'Constructor': {'constructorId': 'red_bull',\n   'url': 'http://en.wikipedia.org/wiki/Red_Bull_Racing',\n   'name': 'Red Bull',\n   'nationality': 'Austrian'},\n  'grid': '4',\n  'laps': '50',\n  'status': 'Finished',\n  'Time': {'millis': '5059293', 'time': '1:24:19.293'},\n  'FastestLap': {'rank': '2',\n   'lap': '50',\n   'Time': {'time': '1:31.772'},\n   'AverageSpeed': {'units': 'kph', 'speed': '242.191'}}}]\n\n\nWe can trivially cast the returned JSON data to a flattened pandas dataframe:\n\npd.json_normalize(erd_race).head()\n\n\n\n\n\n  \n    \n      \n      number\n      position\n      positionText\n      points\n      grid\n      laps\n      status\n      Driver.driverId\n      Driver.permanentNumber\n      Driver.code\n      ...\n      Constructor.url\n      Constructor.name\n      Constructor.nationality\n      Time.millis\n      Time.time\n      FastestLap.rank\n      FastestLap.lap\n      FastestLap.Time.time\n      FastestLap.AverageSpeed.units\n      FastestLap.AverageSpeed.speed\n    \n  \n  \n    \n      0\n      1\n      1\n      1\n      25\n      4\n      50\n      Finished\n      max_verstappen\n      33\n      VER\n      ...\n      http://en.wikipedia.org/wiki/Red_Bull_Racing\n      Red Bull\n      Austrian\n      5059293\n      1:24:19.293\n      2\n      50\n      1:31.772\n      kph\n      242.191\n    \n    \n      1\n      16\n      2\n      2\n      19\n      2\n      50\n      Finished\n      leclerc\n      16\n      LEC\n      ...\n      http://en.wikipedia.org/wiki/Scuderia_Ferrari\n      Ferrari\n      Italian\n      5059842\n      +0.549\n      1\n      48\n      1:31.634\n      kph\n      242.556\n    \n    \n      2\n      55\n      3\n      3\n      15\n      3\n      50\n      Finished\n      sainz\n      55\n      SAI\n      ...\n      http://en.wikipedia.org/wiki/Scuderia_Ferrari\n      Ferrari\n      Italian\n      5067390\n      +8.097\n      3\n      48\n      1:31.905\n      kph\n      241.841\n    \n    \n      3\n      11\n      4\n      4\n      12\n      1\n      50\n      Finished\n      perez\n      11\n      PER\n      ...\n      http://en.wikipedia.org/wiki/Red_Bull_Racing\n      Red Bull\n      Austrian\n      5070093\n      +10.800\n      4\n      46\n      1:32.042\n      kph\n      241.481\n    \n    \n      4\n      63\n      5\n      5\n      10\n      6\n      50\n      Finished\n      russell\n      63\n      RUS\n      ...\n      http://en.wikipedia.org/wiki/Mercedes-Benz_in_...\n      Mercedes\n      German\n      5092025\n      +32.732\n      7\n      43\n      1:32.821\n      kph\n      239.454\n    \n  \n\n5 rows × 26 columns\n\n\n\nThe ergast API can also provide season summary information:\n\npd.json_normalize(ergast.fetch_season(2022)).head(2).T\n\n\n\n\n\n  \n    \n      \n      0\n      1\n    \n  \n  \n    \n      season\n      2022\n      2022\n    \n    \n      round\n      1\n      2\n    \n    \n      url\n      http://en.wikipedia.org/wiki/2022_Bahrain_Gran...\n      http://en.wikipedia.org/wiki/2022_Saudi_Arabia...\n    \n    \n      raceName\n      Bahrain Grand Prix\n      Saudi Arabian Grand Prix\n    \n    \n      date\n      2022-03-20\n      2022-03-27\n    \n    \n      time\n      15:00:00Z\n      17:00:00Z\n    \n    \n      Circuit.circuitId\n      bahrain\n      jeddah\n    \n    \n      Circuit.url\n      http://en.wikipedia.org/wiki/Bahrain_Internati...\n      http://en.wikipedia.org/wiki/Jeddah_Street_Cir...\n    \n    \n      Circuit.circuitName\n      Bahrain International Circuit\n      Jeddah Corniche Circuit\n    \n    \n      Circuit.Location.lat\n      26.0325\n      21.6319\n    \n    \n      Circuit.Location.long\n      50.5106\n      39.1044\n    \n    \n      Circuit.Location.locality\n      Sakhir\n      Jeddah\n    \n    \n      Circuit.Location.country\n      Bahrain\n      Saudi Arabia\n    \n    \n      FirstPractice.date\n      2022-03-18\n      2022-03-25\n    \n    \n      FirstPractice.time\n      12:00:00Z\n      14:00:00Z\n    \n    \n      SecondPractice.date\n      2022-03-18\n      2022-03-25\n    \n    \n      SecondPractice.time\n      15:00:00Z\n      17:00:00Z\n    \n    \n      ThirdPractice.date\n      2022-03-19\n      2022-03-26\n    \n    \n      ThirdPractice.time\n      12:00:00Z\n      14:00:00Z\n    \n    \n      Qualifying.date\n      2022-03-19\n      2022-03-26\n    \n    \n      Qualifying.time\n      15:00:00Z\n      17:00:00Z\n    \n    \n      Sprint.date\n      NaN\n      NaN\n    \n    \n      Sprint.time\n      NaN\n      NaN\n    \n  \n\n\n\n\nWe can also request the metadata describing an event more directly:\n\npd.json_normalize(ergast.fetch_weekend(2022, 2)).T\n\n\n\n\n\n  \n    \n      \n      0\n    \n  \n  \n    \n      season\n      2022\n    \n    \n      round\n      2\n    \n    \n      url\n      http://en.wikipedia.org/wiki/2022_Saudi_Arabia...\n    \n    \n      raceName\n      Saudi Arabian Grand Prix\n    \n    \n      date\n      2022-03-27\n    \n    \n      time\n      17:00:00Z\n    \n    \n      Circuit.circuitId\n      jeddah\n    \n    \n      Circuit.url\n      http://en.wikipedia.org/wiki/Jeddah_Street_Cir...\n    \n    \n      Circuit.circuitName\n      Jeddah Corniche Circuit\n    \n    \n      Circuit.Location.lat\n      21.6319\n    \n    \n      Circuit.Location.long\n      39.1044\n    \n    \n      Circuit.Location.locality\n      Jeddah\n    \n    \n      Circuit.Location.country\n      Saudi Arabia\n    \n    \n      Circuit.Location.alt\n      5\n    \n    \n      FirstPractice.date\n      2022-03-25\n    \n    \n      FirstPractice.time\n      14:00:00Z\n    \n    \n      SecondPractice.date\n      2022-03-25\n    \n    \n      SecondPractice.time\n      17:00:00Z\n    \n    \n      ThirdPractice.date\n      2022-03-26\n    \n    \n      ThirdPractice.time\n      14:00:00Z\n    \n    \n      Qualifying.date\n      2022-03-26\n    \n    \n      Qualifying.time\n      17:00:00Z"
  },
  {
    "objectID": "fastf1-demo.html#summary",
    "href": "fastf1-demo.html#summary",
    "title": "2  Getting Started With FastF1",
    "section": "2.7 Summary",
    "text": "2.7 Summary\nThis chapter has provided a brief overview of some of the key features of the fastf1 API, demonstrating how we can look up event metadata as well as lap information and car telemetry data.\nSome support is also provided for improving the quality of data visualisations by setting appropriate colour schemes or configuring matplotlib axes, for example."
  },
  {
    "objectID": "whatnext.html",
    "href": "whatnext.html",
    "title": "3  What Next?",
    "section": "",
    "text": "Who knows?!"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  }
]